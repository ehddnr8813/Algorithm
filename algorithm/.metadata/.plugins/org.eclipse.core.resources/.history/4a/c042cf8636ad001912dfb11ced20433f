package sw5653;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N, M, K, T;
	static boolean visited[][];
	static int arr[]= new int[3];
	
	static int dx[]= new int[] {1,-1,0,0};
	static int dy[]= new int[] {0,0,1,-1};
	
	static Queue<int []> alive;
	static Queue<int []> nextAlive;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st= new StringTokenizer(br.readLine());
		T=Integer.parseInt(st.nextToken());
		for(int t=1; t<=T; t++) {
			alive= new LinkedList<int[]>();
			nextAlive= new LinkedList<int[]>();
			st= new StringTokenizer(br.readLine());
			N=Integer.parseInt(st.nextToken());
			M=Integer.parseInt(st.nextToken());
			K=Integer.parseInt(st.nextToken());
			visited= new boolean[651][651];
			for(int i=0; i<N; i++) {
				st= new StringTokenizer(br.readLine());
				for(int j=0; j<M; j++) {
					int num=Integer.parseInt(st.nextToken());
					if(num!=0) {
						nextAlive.add(new int[] {300+j,300+i,num, num});
						visited[300+i][300+j]=true;
					}
				}
			}
			while(K-->0) {
				go();
				System.out.println((n-K)+" "+nextAlive.size());
			}
			System.out.println("#"+t+" "+nextAlive.size());
		}
		
	}

	private static void go() {
		alive.addAll(nextAlive);
		nextAlive.clear();
		bfs();
	}

	private static void bfs() {
		while(!alive.isEmpty()) {
			arr=alive.poll();
			int x=arr[0];
			int y=arr[1];
			int count=arr[2];
			int remain=arr[3];
			if(remain==0) {
				for(int k=0; k<4; k++) {
					int nx=x+dx[k];
					int ny=y+dy[k];
					if(visited[ny][nx])continue;
					visited[ny][nx]=true;
					nextAlive.add(new int[] {nx, ny, count, count});
				}
				continue;
			}
			nextAlive.add(new int[] {x,y,count,remain-1});
		}
	}

}
