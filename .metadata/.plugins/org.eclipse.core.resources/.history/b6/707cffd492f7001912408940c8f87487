package wintercoding;

import java.util.ArrayList;

public class Solution {

	static int dx[]= new int[]{1,0,-1,0};
	static int dy[]= new int[]{0,1,0,-1};
	
	static int[][] visited;
	static int N,count=1, diff;
	static int map[][];
	
	public static void main(String[] args) {
		solution(new int[][]{{1,4,8,10},{5,5,5,5},{10,10,10,10},{10,10,10,20}},3);
		for(int i=0; i<N; i++){
			for(int j=0; j<N; j++){
				System.out.print(visited[i][j]+" ");
			}
			System.out.println();
		}
	}
	
    public static int solution(int[][] land, int height) {
    	N=land.length;
    	diff=height;
    	map= new int[N][N];
    	for(int i=0; i<N; i++){
    		map[i]=land[i].clone();
    	}
    	simulate();
        int answer = 0;
        return answer;
    }

	private static void simulate() {
		visited=new int[N][N];
		for(int i=0; i<N; i++){
			for(int j=0; j<N; j++){
				if(visited[i][j]==0){
					visited[i][j]=count;
					dfs(j,i, count);
					count++;
				}
			}
		}
		
	}
	
	private static void dfs(int x, int y, int count) {
		for(int k=0; k<4; k++){
			int nx=x+dx[k];
			int ny=y+dy[k];
			if(nx<0 || ny<0 || nx>=N || ny>=N || visited[ny][nx]!=0)continue;
			if(Math.abs(map[ny][nx]-map[y][x])>diff)continue;
			visited[ny][nx]=count;
			dfs(nx, ny, count);
		}
	}

	static class Node{
		int x;
		int y;
		public Node(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}
	}

}
